[{"/Users/arorashivoy/Programs/tic-tac-toe/src/index.js":"1"},{"size":4515,"mtime":1645797526617,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"og8mjm","/Users/arorashivoy/Programs/tic-tac-toe/src/index.js",["7"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <button \n        className=\"square\" \n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass WonSquare extends React.Component {\n  render() {\n    return (\n      <button \n        className=\"won-square\" \n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\n  \nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square \n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  renderWonSquare(i) {\n    return (\n      <Square \n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    let boardRows = [];\n    for (let row = 0; row < 3; row++) {\n      let boardCols = [];\n      for (let col = 0; col < 3; col++){\n        boardCols.push(<span key={(row*3)+col}>{this.renderSquare((row*3)+col)}</span>);\n      };\n      boardRows.push(<div key={row}>{boardCols}</div>);\n    }\n\n    return (\n      <div>\n        {boardRows}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      wonSquares: Array(3).fill(null)\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares)[0] || squares[i]) {\n      return ;\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\":\"O\";\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step%2) === 0,\n    });\n  }\n\n  checkNoNull(arr) {\n    for (let i = 0; i < arr.length; i++) {\n      if (!arr[i]) {\n        return false\n      }\n    }\n    return true\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step,  move) => {\n      let col, row;\n      if (move !== 0){\n        for (let i = 0; i < 9; i++) {\n          if (this.state.history[move-1].squares[i] !== step.squares[i]) {\n            col = Math.floor(i/3) \n            row = i - (3*col)\n          }\n        };\n      };\n\n      const desc = move ?\n        'Go to move #' + move + ' (' + (col+1) + ', ' + (row+1) + \")\":\n        'Go to game start';\n      \n        if (move === this.state.stepNumber) {\n          return (\n            <li key={move}>\n                <button onClick={() => this.jumpTo(move)}><b>{desc}</b></button>\n            </li>\n          )\n        } else {\n          return (\n            <li key={move}>\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\n            </li>\n          )\n        };\n    });\n\n    const noNull = this.checkNoNull(current.squares)\n    let status;\n    if (winner[0]) {\n      status = 'Winner: ' + winner[0];\n      this.setState({\n        wonSquares: winner[1]\n      });\n    }\n    else if (noNull) {\n      status = 'It is a DRAW'\n    }\n    else {\n      status = 'Next Player: ' + (this.state.xIsNext ? 'X':'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"status\">{status}</div>\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            wonSquares={this.state.wonSquares}\n          />\n          <div className=\"game-info\">\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[b] === squares[c] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [squares[a], lines[i]];\n    }\n  }\n  return [null, null];\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n",{"ruleId":"8","severity":1,"message":"9","line":18,"column":7,"nodeType":"10","messageId":"11","endLine":18,"endColumn":16},"no-unused-vars","'WonSquare' is defined but never used.","Identifier","unusedVar"]